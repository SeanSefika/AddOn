DAY 2

//Sample
package com.demo;
import java.util.Arrays;
import java.util.Scanner;

public class SampleClass
{
        public static void main(String args[])
        {
        Scanner scan = new Scanner (System.in);
        int a[] = {0,1,2,3};
                String obj[] = new String[5];
                for(int i=0;i<obj.length;i++)
                {
                        obj[i]=scan.next();
                }
                System.out.println(Arrays.toString(obj));
        }
}

                /*
                obj[0] = 0;
                obj[1] = "Sefi";
                obj[2] = 'S';
                obj[3] = true;
                System.out.println(obj[1]);
                */




/*import java.util.Scanner;

public class sumofdigits 
{
    public static void main(String[] args) 
{
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter number: ");
        int n = scanner.nextInt();
        scanner.close();
        int sum = 0;
        while (n > 0) 
        {
            int digit = n % 10; 
            sum += digit; 
            n /= 10;
        }

//Arrays
package com.demo;

import java.io.PrintStream;
import java.util.Scanner;

public class Arrays
{
        public static void main(String args[])
        {
        Scanner scan = new Scanner (System.in);
        int a[] = {0,1,2,3};
                int obj[] = new int[5];

                for(int i=0;i<obj.length;i++)
                {
                        obj[i]=scan.nextInt();
                }

                int arr=1;
                for(int i=0;i<obj.length;i++)
                {
                        arr *= obj[i];
                }
                System.out.println(Arrays.toString(obj));
                System.out.println(arr);
        }
}

//StringManipulation

package com.demo;
public class StringManip 
{
public static void main(String[] args)
{
        String name="abcdefghijklmnopqrstuvwxyz";
        String obj=new String("abcdefghijklmnopqrstuvwxyz");
        System.out.println(name==obj);
        System.out.println(name.equals(obj));
        System.out.println(name.toLowerCase());
        System.out.println(name);
        System.out.println(name.toUpperCase());
        char b= name.charAt(2);
        System.out.println(name.charAt(0));
        System.out.println(b);
        System.out.println(name.indexOf('f',0));
        System.out.println(name.indexOf(97,0));
        System.out.println(name.lastIndexOf('S'));
        System.out.println(name.substring(0,11));
        char arr[]= name.toCharArray();
        System.out.println(name.toCharArray());
        System.out.println(arr);
        System.out.println(name.split("a"));
        String c[]=name.split("");
        //System.out.println(Arrays.toString(c));
        System.out.println(name.trim());
        System.out.println(name.isBlank());
        System.out.println(name.isEmpty());
        System.out.println(name.concat(" S"));
        System.out.println(name.replace('a',' '));
        System.out.println(name.replaceAll("abcd","Sefi "));
        System.out.println(name.replaceAll("(.*)xy(.*)","Sean"));
}
}

//String task
package task;
import java.util.Scanner;

        public class StringTask1
        {
        public static void main(String args[]) 
        {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter a string: ");
            String in = scanner.nextLine();
            System.out.println("Enter the letter to count: ");
            char c = scanner.next().charAt(0);
            int count = 0;
            for (int i = 0; i < in.length(); i++) 
            {
                if (in.charAt(i) == c) 
                {
                    count++;
                }
            }
            System.out.println(c +" "+ "appears" +" "+ count +" "+ "times in string");
        }
        }

//Vowels
package task;
        import java.util.Scanner;

        public class StringTask1 
        {
            public static void main(String args[]) 
            {
                Scanner scanner = new Scanner(System.in);
                System.out.println("Enter a string: ");
                String in = scanner.nextLine();
                char[] vowels = {'a', 'e', 'i', 'o', 'u'};
                int count = 0;
                for (int i = 0; i < in.length(); i++) 
                {
                    for (char vowel : vowels) 
                    {
                        if (in.charAt(i) == vowel) 
                        {
                            count++;  
                            break;    
                        }
                    }
                }
                System.out.println("The number of vowels in the string is: " + count);
            }
        }
--------------------------------------------------------------------------------------------------------------------------------------------------
DAY3

//Access specifiers:
private: same class
public: same class ,same package
protected: same class, same package, subclass
default: same class, same package, subclass, outside package

//Non access modifiers:
static, final, abstract, synchronised, volatile, transient, native, strictfp

--------------------------------------------------------------------------------------------------------------------------------------------------

//OOPS
WHAT: A concept where a code is structured, an object is manipulated and used according to the need.

//CONCEPTS OF OOPS:
1. CLASS:  
  - is a template/blueprint to create multiple objects(using single blueprint)

2. OBJECT: 
  - real world entity (represents the real world existing objects), objects created from a class extracted from package in java.

3. ABSTRACTION: 
  - hides the internal codes and inner details, only shows the necessary functionalites and background details.
  - uses abstract keyword and interface 
  - EG:
package com.demo;

public class Oops 
{
        public static void main(String args[])
        {
                Abstract a= new Abstract();
                {
                        public void abname()
                        {
                                System.out.println("Abstract name");
                        }
                }; 
        }
}

abstract class Abstract
{
        public abstract void name();
        public void marks() //concrete method
        {
                System.out.println("80%");
        }
}

interface Sefi
{
        public void abname();
        public void marks();
}

4. ENCAPSULATION: 
  - binding the data and methods of a class in a single unit.
  - EG:
package com.demo;
import java.util.Date;
class Encapsulation
{
        private String username;
        private String password;
        private String email;
        private long phoneNumber;
        private String address;
        private Date CreatedAt;
        private Date UpdatedAt;
        private boolean IsActive;


        public String getUsername()
        {
                return username;
        }
        public void setUsername(String username)
        {
                this.username=username;
        }


        public String getPassword()
        {
                return password;
        }
        public void setPassword(String password)
        {
                this.password=password;
        }


        public String getEmail()
        {
                return email;
        }
        public void setEmail(String email)
        {
                this.email=email;
        }


        public long getPhoneNumber()
        {
                return phoneNumber;
        }
        public void setPhoneNumber(long phoneNumber)
        {
                this.phoneNumber=phoneNumber;
        }


        public String getAddress()
        {
                return address;
        }
        public void setAddress(String address)
        {
                this.address=address;
        }


        public Date getCreatedAt()
        {
                return CreatedAt;
        }
        public void setCreatedAt(Date CreatedAt)
        {
                this.CreatedAt=CreatedAt;
        }


        public Date UpdatedAt()
        {
                return UpdatedAt;
        }
        public void setUpdatedAt(Date UpdatedAt)
        {
                this.UpdatedAt=UpdatedAt;
        }


        public boolean IsActive()
        {
                return IsActive;
        }
        public void setIsActive(boolean IsActive)
        {
                this.IsActive=IsActive;
        }
}
-------------------------------------------------------------------------------------------------------------------------------------------------
package com.demo;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Date;

public class Register
{
        public static void main(String args[])
        {
                Scanner in = new Scanner(System.in);
                Encapsulation e=new Encapsulation();

                ArrayList<Encapsulation> arraylist=new ArrayList<>();

                boolean run = true;
                while(run)
                {
                        System.out.println("1)Are you user");
                        System.out.println("2)Existing user");
                        System.out.println("3)Show all users");
                        System.out.println("4)Exists");
                        System.out.println("Enter the number:");
                        int opt=in.nextInt();
                        in.nextLine();

                if(opt==1)
                {
                System.out.println("Enter your Username");
                String username=in.nextLine();
                System.out.println("Enter your Password");
                String password=in.nextLine();
                System.out.println("Enter your Email");
                String email=in.nextLine();
                System.out.println("Enter your PhoneNumber");
                long phoneNumber=in.nextLong();
                in.nextLine();
                System.out.println("Enter your Address");
                String address=in.nextLine();
                Date CreatedAt=new Date();
                Date UpdatedAt=new Date();
                boolean IsActive=true;

                e.setUsername(username);
                e.setPassword(password);
                e.setEmail(email);
                e.setAddress(address);
                e.setPhoneNumber(phoneNumber);
                e.setCreatedAt(CreatedAt);
                e.setUpdatedAt(UpdatedAt);
                e.setIsActive(IsActive);

                arraylist.add(e);
                }

                else if(opt ==2)
                {
                        boolean user=false;
                        System.out.println("Enter username:");
                        String name=in.next();

                        System.out.println("Enter your password:");
                        String password=in.next();

                        for(int i=0;i<arraylist.size();i++)
                        {
                                Encapsulation userlogin = arraylist.get(i);

                                if(userlogin.getUsername().equals(name) && userlogin.getPassword().equals(password))
                                {
                                        System.out.println("You're logged in!");
                                        System.out.println("You're profile");
                                        System.out.println(userlogin.getUsername());
                                        System.out.println(userlogin.getPassword());
                                        System.out.println(userlogin.getEmail());
                                        System.out.println(userlogin.getAddress());
                                        System.out.println(userlogin.getPhoneNumber());
                                        /*
                                        System.out.println(userlogin.getCreatedAt());
                                        System.out.println(userlogin.UpdatedAt());
                                        System.out.println(userlogin.IsActive());
                                        */
                                        user=true;
                                        break;
                                }
                        }
                        if(!user)
                        {
                                System.out.println("Invalid username and password");
                        }

                        System.out.println(e.getUsername());
                        System.out.println(e.getPassword());
                        System.out.println(e.getEmail());
                        System.out.println(e.getAddress());
                        System.out.println(e.getPhoneNumber());
                        System.out.println(e.getCreatedAt());
                        System.out.println(e.UpdatedAt());
                        System.out.println(e.IsActive());
                }

                else if(opt == 3)
                {
                        System.out.println(arraylist);
                }

                else if(opt ==4)
                {
                        run= false;

                }
                else
                {
                        System.out.println("INVALID INPUT, ENTER CORRECT NUMBER");
                }

        }
        in.close();
}
}

--------------------------------------------------------------------------------------------------------------------------------------------------
5. INHERITANCE: 
  - inheriting the properties from the parent class to the child class.
  - types:

a) Single
- PARENT -> CHILD
- class to class or interface to interface (extends)
- class to interface or interface to class (implements)
- EG:
package com.demo;

public class SingleInheritance extends Parent
{
        public static void main(String args[]) 
        {
                add();
                System.out.println(c);

        }
} 

class Parent
{
        public static int a=10;
        public static int b=20;
        public static int c=a+b;
        static int add()
        {
                return c;
        }
}

b) Multiple
- PARENT PARENT PARENT -> CHILD
- EG:
package com.demo;

public interface MultipleInheritance extends THREE, FOUR, FIVE
{
        public void ONE();
        public void TWO();
}

interface THREE
{
        public void ONE();
        public void TWO();
}

interface FOUR
{
        public void ONE();
        public void TWO();
}

interface FIVE
{
        public void ONE();
        public void TWO();
}
------------------------------------------------------------------------------------------------------------------------------------------------
package com.demo;

public class MultipleInheritance2 
{
        public static void main(String args[])
        {
                MultipleInheritance mi=new MultipleInheritance() 
                {
                        public void ONE()
                        {

                        }
                        public void TWO()
                        {

                        }
                };
        }
}

c) Multilevel
- PARENT1->PARENT2(CHILD1)->PARENT3(CHILD2)
- EG:
package com.demo;

public class MultiLevel extends Parent1
{
        public static void main(String args[])
        {
                System.out.println("Multilevel class");
                Parent1.Aclass();
        }
}

class Parent1 extends Child
{
        public int a=10;
        static void Aclass()
        {
                System.out.println("A class details");

        }
}

class Child extends GrandChild
{
        static void Bclass()
        {
                System.out.println("B class details");

        }
}

class GrandChild 
{
        public int a=10;
        static void Class()
        {
                System.out.println("GrandChild class");

        }
}

d) Hierarchial
- TREE STRUCTURE
- EG:
package com.demo;
public class Hierarchical 
{
        public static void main(String args[])
        {
                Child1 c1 = new Child1();
                Child2 c2 = new Child2();
                c1.access();
                c2.access();
        }
}

class Parent1
{
        int i=10,j=20;
        public void add(int i, int j)
        {
                System.out.println(i+j);
        }
}

class Child1 extends Parent1
{
        int i=20,j=30;
        public void access()
        {
        Parent1 p1=new Parent1();
        p1.add(i,j);
        }
}

class Child2 extends Parent1
{
        int i=30,j=40;
        public void access()
        {
        Parent1 p1=new Parent1();
        p1.add(i,j);
}
}


e) Hybrid
- HIERARCHIAL+MULTIPLE

6. POLYMORPHISM:
- A task can be performed into multiple forms, multiple times.
- Poly- many, Morphism - forms.
- Annotation: providing information to the system. (eg: @Override)
- Method overloading: same function name, different parameters (compile-time)
- Method overriding: 
- EG:
package com.demo;

public class Polymorphism 
{
	public static void main(String args[])
	{
		SingleParent sp = new SingleChild();
		sp.add();
	}
}

class SingleParent
{
	public void add()
	{
		System.out.println("ParentMethod");
	}
}

class SingleChild extends SingleParent
{
	@Override
	public void add()
	{
		System.out.println("ChildMethod");
	}
}
----------------------------------------------------------------------------------------------------------------------
package com.demo;

public class PolymorphismOverload 
{
	public static void main(String args[])
	{
		Overload o=new Overload();
		o.sub();
		System.out.println(o.sub(48));
		System.out.println(o.sub(48,24));
	}
}

class Overload
{
	public void sub()
	{
		System.out.println("Subtraction");
	}
	public int sub(int a)
	{
		return a;
	}
	public int sub(int a,int b)
	{
		return a-b;
	}
}
----------------------------------------------------------------------------------------------------------------------------
EXCEPTION HANDLING:
- interruption in program while running
- types: 
        (A)compile time exception(checked exception- shows error while typing)
                - i/o exception
                - sql exception
                - parse exception
                - arithmetic exception
        (B)runtime exception(unchecked exception- shows error after execution)
                - null pointer
                - index out of bound
                - number format exception
- TRY, CATCH, THROW, THROWS, FINALLY
- throw: explicitly throws error, given inside block of code, can be used in check and unchecked exceptions.
- throws: implicitly throws error, given in method header, can be used only in checked exceptions.
- EG: 
package com.demo;

public class ExceptionClass 
{
	public static void main(String args[])
	{
		try 
		{
			System.out.println(12/0);
		}
		catch(ArithmeticException ae)
		{
			//System.out.println("Undefined");
			ae.printStackTrace();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println(12/1);
		}
	}
}

----------------------------------------------------------------------------------------------------------------------------------------------
package com.demo;

public class NameValidator extends Exception
{
	NameValidator(String s)
	{
		super(s);
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------
CUSTOM EXCEPTION:
package com.demo;
import java.util.Scanner;

public class UserValidation 
{
	public static void main(String args[]) throws NameValidator
	{
		Scanner nm = new Scanner(System.in);
		System.out.println("Enter the string:");
		String name = nm.nextLine().toUpperCase();
		char[] c=name.toCharArray();
		for(char ch:c)
		{
			if('A' <= ch && 'Z' >= ch)
			{
				System.out.println("Validation Successful");
			}
			else if('0' <= ch && '9' >= ch)
			{
				throw new NameValidator("number");
			}
			else
			{
				throw new NameValidator("Symbol");
			}
		}
	}
}
----------------------------------------------------------------------------------------------------------------------------------------
Threads: 
- single process running synchronously
MultiThreading:
- multiple processes running asynchronously
MultiTasking:
- multiple processes/tasks running synchronously

Thread class():
- start()
- run()

JDBC:
-Java DataBase Connectivity:
	> user authentication/authorisation
-JPA:
	> Java Persistent API
-JavaB:
	> data and objects are transferred
-IOC:
	> used for springboot


























